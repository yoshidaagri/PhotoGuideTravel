service: ai-tourism-poc

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.11
  region: ap-northeast-1
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
    GOOGLE_GEMINI_API_KEY: ${env:GOOGLE_GEMINI_API_KEY}
    STRIPE_SECRET_KEY: ${env:STRIPE_SECRET_KEY}
    PROJECT_NAME: ai-tourism-poc
    COGNITO_USER_POOL_ID: ap-northeast-1_Nk2U9t00f
    COGNITO_CLIENT_ID: 2tctru78c2epl4mbhrt8asd55e
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-*"
        - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-*/index/*"
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
      Resource:
        - "arn:aws:s3:::${self:service}-images-${self:provider.stage}/*"
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource:
        - "arn:aws:s3:::${self:service}-images-${self:provider.stage}"

functions:
  auth:
    handler: functions/auth/handler.main
    events:
      - http:
          path: auth/{proxy+}
          method: ANY
          cors: true

  imageAnalysis:
    handler: functions/image-analysis/handler_gemini.main
    timeout: 15
    memorySize: 512
    reservedConcurrency: 5
    events:
      - http:
          path: analyze
          method: POST
          cors: true

  payment:
    handler: functions/payment/handler.main
    events:
      - http:
          path: payment/{proxy+}
          method: ANY
          cors: true

  # userManagement: # Phase 6.5で再有効化予定（現在未使用のためコメントアウト）
  #   handler: functions/user-management/handler.main
  #   events:
  #     - http:
  #         path: users/{proxy+}
  #         method: ANY
  #         cors: true

  imageUpload:
    handler: functions/image-upload/handler.main
    timeout: 30
    memorySize: 512
    events:
      - http:
          path: upload-image
          method: POST
          cors: true

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-users-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
    
    # Cognito User Pool Client with email verification settings
    CognitoUserPoolClientUpdated:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: ${self:provider.environment.COGNITO_USER_POOL_ID}
        ClientName: ${self:service}-client-${self:provider.stage}-email-auth
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_SRP_AUTH
        GenerateSecret: false
        PreventUserExistenceErrors: ENABLED
        SupportedIdentityProviders:
          - COGNITO


# plugins:
#   - serverless-python-requirements

# custom:
#   pythonRequirements:
#     pythonBin: python3
#     zip: true
#     slim: true